{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Donovan\\\\aegisproject\\\\src\\\\componets\\\\RealmApp.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport * as Realm from \"realm-web\";\nimport { baseUrl } from \"../realm.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createRealmApp(id) {\n  return new Realm.App({\n    id,\n    baseUrl\n  });\n}\n\nconst RealmAppContext = /*#__PURE__*/React.createContext(null);\nexport function RealmAppProvider(_ref) {\n  _s();\n\n  let {\n    appId,\n    children\n  } = _ref;\n  // Store Realm.App in React state. If appId changes, all children will rerender and use the new realmApp.\n  const [realmApp, setRealmApp] = React.useState(createRealmApp(appId));\n  React.useEffect(() => {\n    setRealmApp(createRealmApp(appId));\n  }, [appId]); // Store the app's current user in state and wrap the built-in auth functions to modify this state\n\n  const [currentUser, setCurrentUser] = React.useState(realmApp.currentUser); // Wrap the base logIn function to save the logged in user in state\n\n  const logIn = React.useCallback(async credentials => {\n    await realmApp.logIn(credentials);\n    setCurrentUser(realmApp.currentUser);\n  }, [realmApp]); // Wrap the current user's logOut function to remove the logged out user from state\n\n  const logOut = React.useCallback(async () => {\n    await (currentUser === null || currentUser === void 0 ? void 0 : currentUser.logOut());\n    await realmApp.removeUser(currentUser);\n    setCurrentUser(realmApp.currentUser);\n  }, [realmApp, currentUser]); // Override the App's currentUser & logIn properties + include the app-level logout function\n\n  const realmAppContext = React.useMemo(() => {\n    return { ...realmApp,\n      currentUser,\n      logIn,\n      logOut\n    };\n  }, [realmApp, currentUser, logIn, logOut]);\n  return /*#__PURE__*/_jsxDEV(RealmAppContext.Provider, {\n    value: realmAppContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RealmAppProvider, \"F0XZGyT0kemQtTOxU5drtG5ihGE=\");\n\n_c = RealmAppProvider;\nexport function useRealmApp() {\n  _s2();\n\n  const realmApp = React.useContext(RealmAppContext);\n\n  if (!realmApp) {\n    throw new Error(`No Realm App found. Make sure to call useRealmApp() inside of a <RealmAppProvider />.`);\n  }\n\n  return realmApp;\n}\n\n_s2(useRealmApp, \"/rWniGnSX0vP2RIGBeZNKgYlVks=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"RealmAppProvider\");","map":{"version":3,"sources":["C:/Users/Donovan/aegisproject/src/componets/RealmApp.js"],"names":["React","Realm","baseUrl","createRealmApp","id","App","RealmAppContext","createContext","RealmAppProvider","appId","children","realmApp","setRealmApp","useState","useEffect","currentUser","setCurrentUser","logIn","useCallback","credentials","logOut","removeUser","realmAppContext","useMemo","useRealmApp","useContext","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,WAAvB;AACA,SAASC,OAAT,QAAwB,eAAxB;;;AAEA,SAASC,cAAT,CAAwBC,EAAxB,EAA4B;AAC1B,SAAO,IAAIH,KAAK,CAACI,GAAV,CAAc;AAAED,IAAAA,EAAF;AAAMF,IAAAA;AAAN,GAAd,CAAP;AACD;;AAED,MAAMI,eAAe,gBAAGN,KAAK,CAACO,aAAN,CAAoB,IAApB,CAAxB;AAEA,OAAO,SAASC,gBAAT,OAA+C;AAAA;;AAAA,MAArB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAqB;AACpD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,KAAK,CAACa,QAAN,CAAeV,cAAc,CAACM,KAAD,CAA7B,CAAhC;AACAT,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBF,IAAAA,WAAW,CAACT,cAAc,CAACM,KAAD,CAAf,CAAX;AACD,GAFD,EAEG,CAACA,KAAD,CAFH,EAHoD,CAMpD;;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgChB,KAAK,CAACa,QAAN,CAAeF,QAAQ,CAACI,WAAxB,CAAtC,CAPoD,CAQpD;;AACA,QAAME,KAAK,GAAGjB,KAAK,CAACkB,WAAN,CACZ,MAAOC,WAAP,IAAuB;AACrB,UAAMR,QAAQ,CAACM,KAAT,CAAeE,WAAf,CAAN;AACAH,IAAAA,cAAc,CAACL,QAAQ,CAACI,WAAV,CAAd;AACD,GAJW,EAKZ,CAACJ,QAAD,CALY,CAAd,CAToD,CAgBpD;;AACA,QAAMS,MAAM,GAAGpB,KAAK,CAACkB,WAAN,CAAkB,YAAY;AAC3C,WAAMH,WAAN,aAAMA,WAAN,uBAAMA,WAAW,CAAEK,MAAb,EAAN;AACA,UAAMT,QAAQ,CAACU,UAAT,CAAoBN,WAApB,CAAN;AACAC,IAAAA,cAAc,CAACL,QAAQ,CAACI,WAAV,CAAd;AACD,GAJc,EAIZ,CAACJ,QAAD,EAAWI,WAAX,CAJY,CAAf,CAjBoD,CAuBpD;;AACA,QAAMO,eAAe,GAAGtB,KAAK,CAACuB,OAAN,CAAc,MAAM;AAC1C,WAAO,EAAE,GAAGZ,QAAL;AAAeI,MAAAA,WAAf;AAA4BE,MAAAA,KAA5B;AAAmCG,MAAAA;AAAnC,KAAP;AACD,GAFuB,EAErB,CAACT,QAAD,EAAWI,WAAX,EAAwBE,KAAxB,EAA+BG,MAA/B,CAFqB,CAAxB;AAIA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEE,eAAjC;AAAA,cACGZ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAjCeF,gB;;KAAAA,gB;AAmChB,OAAO,SAASgB,WAAT,GAAuB;AAAA;;AAC5B,QAAMb,QAAQ,GAAGX,KAAK,CAACyB,UAAN,CAAiBnB,eAAjB,CAAjB;;AACA,MAAI,CAACK,QAAL,EAAe;AACb,UAAM,IAAIe,KAAJ,CACH,uFADG,CAAN;AAGD;;AACD,SAAOf,QAAP;AACD;;IARea,W","sourcesContent":["import React from \"react\";\nimport * as Realm from \"realm-web\";\nimport { baseUrl } from \"../realm.json\";\n\nfunction createRealmApp(id) {\n  return new Realm.App({ id, baseUrl });\n}\n\nconst RealmAppContext = React.createContext(null);\n\nexport function RealmAppProvider({ appId, children }) {\n  // Store Realm.App in React state. If appId changes, all children will rerender and use the new realmApp.\n  const [realmApp, setRealmApp] = React.useState(createRealmApp(appId));\n  React.useEffect(() => {\n    setRealmApp(createRealmApp(appId));\n  }, [appId]);\n  // Store the app's current user in state and wrap the built-in auth functions to modify this state\n  const [currentUser, setCurrentUser] = React.useState(realmApp.currentUser);\n  // Wrap the base logIn function to save the logged in user in state\n  const logIn = React.useCallback(\n    async (credentials) => {\n      await realmApp.logIn(credentials);\n      setCurrentUser(realmApp.currentUser);\n    },\n    [realmApp]\n  );\n  // Wrap the current user's logOut function to remove the logged out user from state\n  const logOut = React.useCallback(async () => {\n    await currentUser?.logOut();\n    await realmApp.removeUser(currentUser);\n    setCurrentUser(realmApp.currentUser);\n  }, [realmApp, currentUser]);\n\n  // Override the App's currentUser & logIn properties + include the app-level logout function\n  const realmAppContext = React.useMemo(() => {\n    return { ...realmApp, currentUser, logIn, logOut };\n  }, [realmApp, currentUser, logIn, logOut]);\n\n  return (\n    <RealmAppContext.Provider value={realmAppContext}>\n      {children}\n    </RealmAppContext.Provider>\n  );\n}\n\nexport function useRealmApp() {\n  const realmApp = React.useContext(RealmAppContext);\n  if (!realmApp) {\n    throw new Error(\n      `No Realm App found. Make sure to call useRealmApp() inside of a <RealmAppProvider />.`\n    );\n  }\n  return realmApp;\n}\n"]},"metadata":{},"sourceType":"module"}