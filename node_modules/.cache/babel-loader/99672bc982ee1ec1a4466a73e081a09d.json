{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Donovan\\\\aegisproject\\\\src\\\\componets\\\\WelcomePage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as Realm from \"realm-web\";\nimport { Container, TextField, Button, IconButton, Card, Typography, InputAdornment } from \"@material-ui/core\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport { useRealmApp } from \"./RealmApp\";\nimport { MoreInfoTemplateAndDocs } from \"./MoreInfo\";\nimport { toggleBoolean } from \"../utils\";\nimport { useErrorAlert } from \"../hooks/useErrorAlert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function WelcomePage() {\n  _s();\n\n  var _error$email, _error$password;\n\n  const realmApp = useRealmApp(); // Track whether the user is logging in or signing up for a new account\n\n  const [isSignup, setIsSignup] = React.useState(false);\n\n  const toggleIsSignup = () => {\n    clearErrors();\n    setIsSignup(toggleBoolean);\n  }; // Authentication errors\n\n\n  const noErrors = {\n    email: null,\n    password: null,\n    other: null\n  };\n  const [error, setError] = React.useState(noErrors);\n\n  const clearErrors = () => setError(noErrors);\n\n  const NonAuthErrorAlert = useErrorAlert({\n    error: error.other,\n    clearError: () => {\n      setError(prevError => ({ ...prevError,\n        other: null\n      }));\n    }\n  }); // Manage password visibility\n\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const toggleShowPassword = () => setShowPassword(toggleBoolean);\n\n  const onFormSubmit = async _ref => {\n    let {\n      email,\n      password\n    } = _ref;\n    clearErrors();\n\n    try {\n      if (isSignup) {\n        await realmApp.emailPasswordAuth.registerUser(email, password);\n      }\n\n      await realmApp.logIn(Realm.Credentials.emailPassword(email, password));\n    } catch (err) {\n      handleAuthenticationError(err, setError);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: \"auth-card\",\n      variant: \"outlined\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"auth-form\",\n        onSubmit: e => {\n          e.preventDefault();\n          const formData = new FormData(e.target);\n          const {\n            email,\n            password\n          } = Object.fromEntries(formData.entries());\n          onFormSubmit({\n            email,\n            password\n          });\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h2\",\n          variant: \"h4\",\n          gutterBottom: true,\n          children: isSignup ? \"Sign Up\" : \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NonAuthErrorAlert, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"input-email\",\n          name: \"email\",\n          label: \"Email Address\",\n          variant: \"outlined\",\n          error: Boolean(error.email),\n          helperText: (_error$email = error.email) !== null && _error$email !== void 0 ? _error$email : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"input-password\",\n          type: showPassword ? \"text\" : \"password\",\n          name: \"password\",\n          label: \"Password\",\n          variant: \"outlined\",\n          error: Boolean(error.password),\n          helperText: (_error$password = error.password) !== null && _error$password !== void 0 ? _error$password : \"\",\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"toggle password visibility\",\n                onClick: toggleShowPassword,\n                onMouseDown: e => {\n                  e.preventDefault();\n                },\n                children: showPassword ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 37\n                }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 54\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: isSignup ? \"Create Account\" : \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"link-button\",\n          onClick: () => toggleIsSignup(),\n          children: isSignup ? \"Already have an account? Log In\" : \"Sign up for an account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MoreInfoTemplateAndDocs, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WelcomePage, \"tpJE/ppSrmPfzEAUr/OjL+Ei57M=\", false, function () {\n  return [useRealmApp, useErrorAlert];\n});\n\n_c = WelcomePage;\n\nfunction handleAuthenticationError(err, setError) {\n  const handleUnknownError = () => {\n    setError(prevError => ({ ...prevError,\n      other: \"Something went wrong. Try again in a little bit.\"\n    }));\n    console.warn(\"Something went wrong with a Realm login or signup request. See the following error for details.\");\n    console.error(err);\n  };\n\n  if (err instanceof Realm.MongoDBRealmError) {\n    const {\n      error,\n      statusCode\n    } = err;\n    const errorType = error || statusCode;\n\n    switch (errorType) {\n      case \"invalid username\":\n        setError(prevError => ({ ...prevError,\n          email: \"Invalid email address.\"\n        }));\n        break;\n\n      case \"invalid username/password\":\n      case \"invalid password\":\n      case 401:\n        setError(prevError => ({ ...prevError,\n          password: \"Incorrect password.\"\n        }));\n        break;\n\n      case \"name already in use\":\n      case 409:\n        setError(prevError => ({ ...prevError,\n          email: \"Email is already registered.\"\n        }));\n        break;\n\n      case \"password must be between 6 and 128 characters\":\n      case 400:\n        setError(prevError => ({ ...prevError,\n          password: \"Password must be between 6 and 128 characters.\"\n        }));\n        break;\n\n      default:\n        handleUnknownError();\n        break;\n    }\n  } else {\n    handleUnknownError();\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"WelcomePage\");","map":{"version":3,"sources":["C:/Users/Donovan/aegisproject/src/componets/WelcomePage.js"],"names":["React","Realm","Container","TextField","Button","IconButton","Card","Typography","InputAdornment","Visibility","VisibilityOff","useRealmApp","MoreInfoTemplateAndDocs","toggleBoolean","useErrorAlert","WelcomePage","realmApp","isSignup","setIsSignup","useState","toggleIsSignup","clearErrors","noErrors","email","password","other","error","setError","NonAuthErrorAlert","clearError","prevError","showPassword","setShowPassword","toggleShowPassword","onFormSubmit","emailPasswordAuth","registerUser","logIn","Credentials","emailPassword","err","handleAuthenticationError","e","preventDefault","formData","FormData","target","Object","fromEntries","entries","Boolean","endAdornment","handleUnknownError","console","warn","MongoDBRealmError","statusCode","errorType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as Realm from \"realm-web\";\nimport {\n  Container,\n  TextField,\n  Button,\n  IconButton,\n  Card,\n  Typography,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport { useRealmApp } from \"./RealmApp\";\nimport { MoreInfoTemplateAndDocs } from \"./MoreInfo\";\nimport { toggleBoolean } from \"../utils\";\nimport { useErrorAlert } from \"../hooks/useErrorAlert\";\n\nexport function WelcomePage() {\n  const realmApp = useRealmApp();\n  // Track whether the user is logging in or signing up for a new account\n  const [isSignup, setIsSignup] = React.useState(false);\n  const toggleIsSignup = () => {\n    clearErrors();\n    setIsSignup(toggleBoolean);\n  };\n  // Authentication errors\n  const noErrors = {\n    email: null,\n    password: null,\n    other: null,\n  };\n  const [error, setError] = React.useState(noErrors);\n  const clearErrors = () => setError(noErrors);\n  const NonAuthErrorAlert = useErrorAlert({\n    error: error.other,\n    clearError: () => {\n      setError((prevError) => ({ ...prevError, other: null }));\n    },\n  });\n  // Manage password visibility\n  const [showPassword, setShowPassword] = React.useState(false);\n  const toggleShowPassword = () => setShowPassword(toggleBoolean);\n\n  const onFormSubmit = async ({ email, password }) => {\n    clearErrors();\n    try {\n      if (isSignup) {\n        await realmApp.emailPasswordAuth.registerUser(email, password);\n      }\n      await realmApp.logIn(Realm.Credentials.emailPassword(email, password));\n    } catch (err) {\n      handleAuthenticationError(err, setError);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\" className=\"main-container\">\n      <Card className=\"auth-card\" variant=\"outlined\">\n        <form\n          className=\"auth-form\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const { email, password } = Object.fromEntries(formData.entries());\n            onFormSubmit({ email, password });\n          }}\n        >\n          <Typography component=\"h2\" variant=\"h4\" gutterBottom>\n            {isSignup ? \"Sign Up\" : \"Log In\"}\n          </Typography>\n          <NonAuthErrorAlert />\n          <TextField\n            id=\"input-email\"\n            name=\"email\"\n            label=\"Email Address\"\n            variant=\"outlined\"\n            error={Boolean(error.email)}\n            helperText={error.email ?? \"\"}\n          />\n          <TextField\n            id=\"input-password\"\n            type={showPassword ? \"text\" : \"password\"}\n            name=\"password\"\n            label=\"Password\"\n            variant=\"outlined\"\n            error={Boolean(error.password)}\n            helperText={error.password ?? \"\"}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={toggleShowPassword}\n                    onMouseDown={(e) => {\n                      e.preventDefault();\n                    }}\n                  >\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            {isSignup ? \"Create Account\" : \"Log In\"}\n          </Button>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => toggleIsSignup()}\n          >\n            {isSignup\n              ? \"Already have an account? Log In\"\n              : \"Sign up for an account\"}\n          </button>\n        </form>\n      </Card>\n      <MoreInfoTemplateAndDocs />\n    </Container>\n  );\n}\n\nfunction handleAuthenticationError(err, setError) {\n  const handleUnknownError = () => {\n    setError((prevError) => ({\n      ...prevError,\n      other: \"Something went wrong. Try again in a little bit.\",\n    }));\n    console.warn(\n      \"Something went wrong with a Realm login or signup request. See the following error for details.\"\n    );\n    console.error(err);\n  };\n  if (err instanceof Realm.MongoDBRealmError) {\n    const { error, statusCode } = err;\n    const errorType = error || statusCode;\n    switch (errorType) {\n      case \"invalid username\":\n        setError((prevError) => ({\n          ...prevError,\n          email: \"Invalid email address.\",\n        }));\n        break;\n      case \"invalid username/password\":\n      case \"invalid password\":\n      case 401:\n        setError((prevError) => ({\n          ...prevError,\n          password: \"Incorrect password.\",\n        }));\n        break;\n      case \"name already in use\":\n      case 409:\n        setError((prevError) => ({\n          ...prevError,\n          email: \"Email is already registered.\",\n        }));\n        break;\n      case \"password must be between 6 and 128 characters\":\n      case 400:\n        setError((prevError) => ({\n          ...prevError,\n          password: \"Password must be between 6 and 128 characters.\",\n        }));\n        break;\n      default:\n        handleUnknownError();\n        break;\n    }\n  } else {\n    handleUnknownError();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}